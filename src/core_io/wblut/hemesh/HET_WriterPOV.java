package wblut.hemesh;

import java.io.File;
import java.io.PrintWriter;

import wblut.geom.WB_Coord;

class HET_WriterPOV {
	final String COMMA = ", ";
	protected PrintWriter povWriter;
	protected int numVerticesWritten = 0;
	protected int numNormalsWritten = 0;

	public void beginSave(final String path, final String name) {
		try {
			povWriter = new PrintWriter(new File(path, name + ".pov"));
			handleBeginSave();
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	public void beginSave(final PrintWriter pw) {
		povWriter = pw;
		handleBeginSave();
	}

	public void endSave() {
		povWriter.println("}");
		povWriter.flush();
	}

	public void beginMesh2(final String name) {
		final StringBuilder pov = new StringBuilder("#declare ");
		pov.append(name);
		pov.append(" = mesh2{\n");
		pov.append("\tvertex_vectors {");
		povWriter.println(pov);
	}

	public void endSection() {
		povWriter.println("\t}");
	}

	public void beginNormals(final int count) {
		povWriter.println("\tnormal_vectors{");
		total(count);
	}

	public void beginIndices(final int count) {
		povWriter.println("\tface_indices{");
		total(count);
	}

	public void total(final int count) {
		povWriter.println(String.format("\t%d,", count));
	}

	public void face(final int a, final int b, final int c) {
		povWriter.println(buildVector(a, b, c));
	}

	public int getCurrNormalOffset() {
		return numNormalsWritten;
	}

	public int getCurrVertexOffset() {
		return numVerticesWritten;
	}

	protected void handleBeginSave() {
		povWriter.println("// generated by HE_POVExport");
		numVerticesWritten = 0;
		numNormalsWritten = 0;
	}

	public void newObject(final String name) {
		povWriter.println(name);
	}

	public void normal(final WB_Coord n) {
		povWriter.println(buildVector(n));
		numNormalsWritten++;
	}

	public void vertex(final WB_Coord v) {
		povWriter.println(buildVector(v));
		numVerticesWritten++;
	}

	private StringBuilder buildVector(final int a, final int b, final int c) {
		final StringBuilder my_vector = new StringBuilder(120);
		my_vector.append('\t').append('<');
		my_vector.append(a).append(COMMA);
		my_vector.append(b).append(COMMA);
		my_vector.append(c).append('>');
		return my_vector.append(COMMA);
	}

	private StringBuilder buildVector(final WB_Coord n) {
		final StringBuilder my_vector = new StringBuilder(120);
		my_vector.append('\t').append('<');
		my_vector.append(n.xd()).append(COMMA);
		my_vector.append(n.yd() * -1).append(COMMA);
		my_vector.append(n.zd() * -1).append('>');
		return my_vector.append(COMMA);
	}
}